
как добавить очередной обработчик:
1.	в файл "forward.h" добавить новый typedef с именем класса и его алиасами (принято 3 алиаса),
	формат: typedef class CH[имя класса] udH[имя класса], *udPH[имя класса], **udPPH[имя класса];
	если предполагается обработчик,
	формы и списка:
	defineForwardHandler( [имя класса] );
	
	в project.cpp
	_def_handler( [имя класса] );
	
	только формы:
	forwardFormHandlerCallback( [имя класса] );
	
	в project.cpp
	defineFormHandler( [имя класса] );

2.	в файл "Project[имя класса].h" добавить шаблонный текст описания класса (1).

3.	в файл "Project[имя класса].h" добавить шаблонный текст определения класса (2).

4.	если обработчик предполагается использовать для отдачи данных, то необходимо добавить его создание в
	файле project.cpp в определение функции InitModel класса CAppInitProject до вызова pModel->Init( )
	формат: pModel->SetHandler( "[имя обработчика]", new udH[имя класса] );
	необходимо учесть, что имя обработчика должно быть уникальным в рамках модели,
	по имени обработчика отдается обработка запроса клиента.
	
5.	добавить подключение заголовочного файла в include_project.h

Родительские обработчики:
1. StateHandler - базовый обработчик с малым набором функций.
2. StateHandlerSimple - простой обработчик, который умеет отдавать данные и работать с ними.
3. StateHandlerSimpleOneName - простой обработчик, сущность которого состоит из одного атрибута (часто имя).


(1) шаблонный текст описания класса:

/**
	Tourist application
	Клиентская часть

	[описание класса]
*/
#ifndef TOURIST_APPLICATION_TOURIST_CLIENT_[имя класса в верхнем регистре]_H
#define TOURIST_APPLICATION_TOURIST_CLIENT_[имя класса в верхнем регистре]_H

namespace UdSDK {

	class CH[имя класса] : public ud[имя родительского обработчика] {

	public:
		CH[имя класса]( );
		CH[имя класса]( const CH[имя класса]& objCopy );

		virtual ~CH[имя класса]( );

		CH[имя класса]& operator =( const CH[имя класса]& objCopy );

	}; // class CH[имя класса]

} // namespace UdSDK

#endif


(2) шаблонный текст определения класса:

#include "includes.h"
#include "externals.h"

namespace UdSDK {

	CH[имя класса]::CH[имя класса]( ) : ud[имя родительского обработчика]( ) {
		m_szTableName	= "ud_[имя таблицы хранилища]";
		m_szUpdIndex	= "[имя атрибута обновления]";
		m_szName		= "[имя обработчика]";
		m_fnGetObject	= GetProject[имя класса];
		m_szOrderBy		= "[имя атрибута уапорядочивания списка по умолчанию]";
		m_fnGetFormHandler	= GetH[имя класса]Form;
	}

	CH[имя класса]::CH[имя класса]( const CH[имя класса]& objCopy ) {
	}

	CH[имя класса]::~CH[имя класса]( ) {
	}

	CH[имя класса]& CH[имя класса]::operator =( const CH[имя класса]& objCopy ) {
		return *this;
	}

} // namespace UdSDK
