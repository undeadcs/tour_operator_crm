
если организовывать проект с помощью сущностей и связей между ними, то можно формализовать и
автоматизировать всю работу с формами, подгрузкой данных и т.д. таким образом можно ускорить
разработку абсолютно любого приложения. от программиста будет требоваться описать структуры и связи,
сверстать формы и списки, а все остальное будет предоставлено системой. То есть по сути необходимо
будет детальное проектирование.

Связь-порождение:
по сути это связь один-к-одному, но сущность должна быть отдельная, чтобы на нее завязывать операции.
в основном это лицевые счета, которые создаются автоматически для клиента, партнера и т.д. Такой
объект автоматически создается системой при добавлении сущности, и удаляется при ее удалении.

Атрибут-связь:
является по сути foreign key на другую сущность, при подгрузке формы (редактирование сущности),
подгружается дополнительно с данными сущности. При подгрузке списка можно подгружать по foreign key
дополнительные данные.

Связь с другой сущностью:
у другой сущности есть атрибут, который является foreign key на эту сущность. Родительская сущность.

Сущность описывается данными:
структура (класс на каждую сущность)
коллбэк создания сущности (функция, возвращающая указатель на вновь созданный объект)
таблица хранилище

специфические функции:
на клиенте:
применение шаблона при подгрузке сущностей (позволяет добавлять спец атрибуты с данными)
обработка списка дополнительных сущностей после загрузки (позволяет преобразовать список)
добавление дополнительных атрибутов (применяется до подгрузки списка, чтобы добавить спец атрибуты)








































Возможные операции синхронизации:
1. синхронизация баз данных.
2. синхронизация редактирования объекта.
3. синхронизация добавления объекта.
4. синхронизация сохранения объекта (после пункта 2).
5. синхронизация удаления объекта.

1. - тут блядский момент, так как необходимо обмениваться данными и ждать подтверждения.

2. с клиента присылается имя обработчика, а ему потом передается управление обработки запроса,
	в ответ сервер должен подтвердить, либо отвергнуть запрос на редактирование объекта.
	
3. клиентом отсылается вся информация заданному обработчику состояния, в ответ он получает
	данные, которые содержат актуальные атрибуты сущностей.
	
4. клиентом отсылается вся информация заданному обработчику.

5. клиентом отсылается вся информация заданному обработчику.







































типы запросов к серверу:
1.	получение ID для добавления объекта.
2.	добавление объекта.
3.	удаление объекта.
4.	обновление объекта.
5.	получение объекта на редактирование (чтоб сервер смог заблокировать его).
6.	проверка актуальности данных (каждый раз при заходе в списки происходит сравнение, в ответе будут свежие данные).


Для обработки сообщений создаем дочерний трэд, который занимается принятием коннектов и их обработкой.
Собираем данные об объекте в один массив байт (разбором займется обработчик на стороне сервера).
Записываем имя обработчика в запрос и посылаем его серверу.
Сервер выгребает имя обработчика,
обращается к модели,
получает обработчик состояния,
запускает функцию обработки запроса.

Функция Sync обработчика состояния:
если возвращает 1, то операцию продолжить и с базой
если возвращает 0, то ничего не продолжать (такой объект уже существует).

возможно в других случаях нужны еще всякие коды, по ходу проекта от сущности к сущности точно определим
необходимый спектр значений.

для хранения версий таблиц используется таблица метаданных, которая в каждой строке содержит информацию
о каждой таблице системы. необходимые атрибуты:
наименование таблицы
версия
последний номер id (должен совпадать с auto_increment)
дата последнего добавления записей
дата последнего обновления записей
дата последнего удаления записей

так же по каждой таблице хранится лог запросов к ней:
таблица
версия таблицы при запросе
текст запроса


перед тем как добавить/удалить/обновить объект в базе необходимо просинкать таблицы (вдруг пока человек
работал с формой кто-то другой добавил уже несколько новых объектов), потом произвести операцию,
что приведет к совершенно одинаковому состоянию базы на обоих компах.
последовательность такая:
синк баз
операция над сущностью
синхронное обновление данных (версии инкрементируются по одинаковому алгоритму)

синкание баз происходит так:
клиент собирает все данные по текущему состоянию таблиц
сервер сравнивает эти данные со своими
в ответе приходит текущее состояние всех таблиц и запросы, которые необходимо выполнить

заблокированные сущности нельзя:
удалить
редактировать
удалить связанные с ними сущности
